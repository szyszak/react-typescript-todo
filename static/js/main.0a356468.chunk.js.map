{"version":3,"sources":["store/StoreReducer.tsx","store/Store.tsx","components/Checkbox.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/Form.tsx","App.tsx","index.tsx"],"names":["StoreReducer","state","action","type","text","payload","id","Math","floor","Date","getTime","random","complete","filter","item","newState","todoItem","find","StoreContext","createContext","Wrapper","styled","div","Label","label","StyledCheckbox","input","attrs","Checkbox","dispatch","useContext","checked","String","onChange","htmlFor","StyledTodoItem","li","Button","button","Text","p","props","TodoItem","onClick","StyledTodoList","ul","Paragraph","TodoList","renderedItems","map","idx","key","length","TextInput","Form","useState","inputValue","setInputValue","onSubmit","ev","preventDefault","alert","value","currentTarget","required","MainHeader","h1","App","GlobalStyles","createGlobalStyle","process","ReactDOM","render","children","useReducer","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0a356468.chunk.js","sourcesContent":["import { IState, IAction } from '../types/types';\n\nconst generateId = () => {\n  return Math.floor(new Date().getTime() * Math.random());\n};\n\nconst StoreReducer = (state: IState, action: IAction): IState => {\n  switch (action.type) {\n    case 'ADD_TODO': {\n      const newState: IState = [\n        ...state,\n        { text: action.payload, id: generateId(), complete: false }\n      ];\n\n      return newState;\n    }\n\n    case 'REMOVE_TODO': {\n      const newState: IState = state.filter(item => {\n        return item.id !== action.payload;\n      });\n\n      return newState;\n    }\n\n    case 'TOGGLE_DONE': {\n      const newState: IState = [...state];\n      const todoItem = newState.find(item => item.id === action.payload)!;\n      todoItem.complete = !todoItem.complete;\n\n      return newState;\n    }\n\n    case 'CLEAR_TODOS': {\n      return [];\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default StoreReducer;\n","import React, { useReducer, createContext } from 'react';\n// import initialState from './initialState';\nimport StoreReducer from './StoreReducer';\n\nconst StoreContext = createContext<any>(null);\n\nconst StoreProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(StoreReducer, []);\n\n  return <StoreContext.Provider value={{ state, dispatch }}>{children}</StoreContext.Provider>;\n};\n\nexport { StoreContext, StoreProvider };\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { StoreContext } from '../store/Store';\nimport { ITodoItem, IContext } from '../types/types';\n\n// STYLES\nconst Wrapper = styled.div`\n  position: relative;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-right: 10px;\n  width: 24px;\n  height: 24px;\n  border: solid 2px #000000;\n  cursor: pointer;\n\n  &::after {\n    content: '';\n    position: absolute;\n    display: none;\n    left: 8px;\n    top: 4px;\n    width: 5px;\n    height: 10px;\n    border: solid #000000;\n    border-width: 0 3px 3px 0;\n    transform: rotate(45deg);\n  }\n`;\n\nconst StyledCheckbox = styled.input.attrs({ type: 'checkbox' })`\n  height: 0;\n  width: 0;\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n  clip: rect(1px, 1px, 1px, 1px);\n\n  &:checked + label {\n    background-color: none;\n  }\n\n  &:checked + label::after {\n    display: block;\n  }\n`;\n\n// COMPONENT\nconst Checkbox: React.FC<Partial<ITodoItem>> = ({ complete, id }) => {\n  const { dispatch }: IContext = useContext(StoreContext);\n\n  return (\n    <Wrapper>\n      <StyledCheckbox\n        checked={complete}\n        id={String(id)}\n        onChange={() => dispatch({ type: 'TOGGLE_DONE', payload: id! })}\n      />\n      <Label htmlFor={String(id)} />\n    </Wrapper>\n  );\n};\n\nexport default Checkbox;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport Checkbox from './Checkbox';\nimport { StoreContext } from '../store/Store';\nimport { IContext, ITodoItem } from '../types/types';\n\n// STYLES\nconst StyledTodoItem = styled.li`\n  padding: 10px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-bottom: 1px dashed #000000;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst Button = styled.button`\n  width: 24px;\n  height: 24px;\n  background-color: #ffdbad;\n  border: 2px solid #000000;\n  cursor: pointer;\n`;\n\nconst Text = styled.p<Partial<ITodoItem>>`\n  max-width: 80%;\n  margin-right: auto;\n  overflow-wrap: break-word;\n  text-decoration: ${props => (props.complete ? 'line-through' : 'none')};\n`;\n\n// COMPONENT\nconst TodoItem: React.FC<ITodoItem> = ({ text, id, complete }) => {\n  const { dispatch }: IContext = useContext(StoreContext);\n\n  return (\n    <StyledTodoItem>\n      <Text complete={complete}>{text}</Text>\n\n      <Checkbox complete={complete} id={id} />\n\n      <Button onClick={() => dispatch({ type: 'REMOVE_TODO', payload: id })}>&#x274C;</Button>\n    </StyledTodoItem>\n  );\n};\n\nexport default TodoItem;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { StoreContext } from '../store/Store';\nimport { ITodoItem, IContext } from '../types/types';\nimport TodoItem from './TodoItem';\n\n// STYLES\nconst StyledTodoList = styled.ul`\n  list-style: none;\n`;\n\nconst Paragraph = styled.p`\n  margin-top: 6px;\n  font-size: 22px;\n`;\n\n// COMPONENT\nconst TodoList: React.FC = () => {\n  const { state }: IContext = useContext(StoreContext);\n\n  const renderedItems = state.map((item: ITodoItem, idx: number) => {\n    return <TodoItem key={idx} id={item.id} text={item.text} complete={item.complete} />;\n  });\n\n  if (state.length === 0) {\n    return <Paragraph>No todos found.</Paragraph>;\n  } else {\n    return <StyledTodoList>{renderedItems}</StyledTodoList>;\n  }\n};\n\nexport default TodoList;\n","import React, { useContext, useState, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport { StoreContext } from '../store/Store';\nimport { IContext } from '../types/types';\n\n// STYLES\nconst Label = styled.label`\n  font-size: 14px;\n  margin-right: 6px;\n`;\n\nconst TextInput = styled.input.attrs({ type: 'text' })`\n  height: 28px;\n  padding: 4px;\n\n  @media (max-width: 430px) {\n    width: 160px;\n  }\n`;\n\nconst Button = styled.button`\n  height: 28px;\n  padding: 0 10px;\n  background-color: #ffdbad;\n  border: none;\n  cursor: pointer;\n`;\n\nconst Wrapper = styled.div`\n  margin: 10px 0;\n`;\n\n// COMPONENT\nconst Form: React.FC = () => {\n  const { dispatch }: IContext = useContext(StoreContext);\n  const [inputValue, setInputValue] = useState('');\n\n  const handleChange = (ev: React.FormEvent<HTMLInputElement>) => {\n    setInputValue(ev.currentTarget.value);\n  };\n\n  const handleSubmit = (ev: React.FormEvent) => {\n    ev.preventDefault();\n\n    if (inputValue.length === 0) {\n      alert(`Todo text can't be empty.`);\n      return;\n    }\n\n    dispatch({ type: 'ADD_TODO', payload: inputValue });\n    setInputValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Wrapper>\n        <Label htmlFor=\"newTask\">New task:</Label>\n        <TextInput id=\"newTask\" value={inputValue} onChange={handleChange} required />\n        <Button type=\"submit\">ADD</Button>\n      </Wrapper>\n      <Button type=\"button\" onClick={() => dispatch({ type: 'CLEAR_TODOS' })}>\n        CLEAR ALL\n      </Button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport TodoList from './components/TodoList';\nimport Form from './components/Form';\n\n// STYLES\nconst Wrapper = styled.div`\n  width: 420px;\n  padding: 30px;\n  background-color: #ffffff;\n\n  @media (max-width: 430px) {\n    width: 320px;\n    padding: 15px;\n  }\n`;\n\nconst MainHeader = styled.h1`\n  text-align: center;\n  margin-bottom: 16px;\n`;\n\n// COMPONENT\nconst App: React.FC = () => {\n  return (\n    <Wrapper>\n      <MainHeader>Todo App</MainHeader>\n      <Form />\n      <TodoList />\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport App from './App';\nimport { StoreProvider } from './store/Store';\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    display: flex;\n    justify-content: center;\n    padding-top: 60px;\n    font-family: 'Open Sans';\n    background-image: url(${process.env.PUBLIC_URL}/bg.jpg);\n  }\n\n`;\n\nReactDOM.render(\n  <StoreProvider>\n    <GlobalStyles />\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}